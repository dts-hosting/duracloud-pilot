AWSTemplateFormatVersion: 2010-09-09
Description: >-
  DuraCloud
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON

Resources:
  ##### Functions
  BucketRequestedFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile.bucket-requested # SAM CLI not respecting build args
      DockerTag: !Sub "${AWS::StackName}-bucket-requested"
      BuildArgs:
        FUNCTION_NAME: bucket-requested
    Properties:
      Architectures:
        - x86_64
      Description: DuraCloud function that processes bucket requested events
      Environment:
        Variables:
          BUCKET_PREFIX: !Sub "${AWS::StackName}"
      MemorySize: 128
      PackageType: Image
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:CreateBucket
                - s3:GetObject
                # Basic bucket policy and tagging
                - s3:PutBucketTagging
                - s3:PutBucketPolicy
                # EventBridge notifications
                - s3:PutBucketNotificationConfiguration
                # Inventory configuration
                - s3:PutBucketInventoryConfiguration
                # Public access settings
                - s3:PutBucketPublicAccessBlock
                - s3:PutBucketAcl
                # Replication configuration
                - s3:PutBucketReplication
                # Storage tier management
                - s3:PutBucketLifecycleConfiguration
              Resource: "arn:aws:s3:::*"
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: "*"
              Condition:
                StringEquals:
                  "iam:PassedToService": "s3.amazonaws.com"
      Timeout: 300

  ##### Other resources (TODO: docs for each resource)
  EventsObjectCreatedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Created"
      Targets:
        - Arn: !GetAtt SQSObjectCreated.Arn
          Id: "SendToSQSOnCreate"
          RoleArn: !GetAtt IAMEventsInvokeSQSRole.Arn

  EventsObjectDeletedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Deleted"
      Targets:
        - Arn: !GetAtt SQSObjectDeleted.Arn
          Id: "SendToSQSOnDelete"
          RoleArn: !GetAtt IAMEventsInvokeSQSRole.Arn

  IAMEventsInvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-invoke-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt BucketRequestedFunction.Arn

  IAMEventsInvokeSQSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-invoke-sqs-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource:
                  - !GetAtt SQSObjectCreated.Arn
                  - !GetAtt SQSObjectDeleted.Arn

  LambdaBucketRequestInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BucketRequestedFunction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-bucket-requested"

#  LambdaSQSObjectCreatedSource:
#    Type: AWS::Lambda::EventSourceMapping
#    Properties:
#      BatchSize: 10
#      EventSourceArn: !GetAtt SQSObjectCreated.Arn
#      FunctionName: !Ref FileUploadedFunction

#  LambdaSQSObjectDeletedSource:
#    Type: AWS::Lambda::EventSourceMapping
#    Properties:
#      BatchSize: 10
#      EventSourceArn: !GetAtt SQSObjectDeleted.Arn
#      FunctionName: !Ref FileDeletedFunction

  LogsBucketRequestedFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BucketRequestedFunction}"
      RetentionInDays: 7

  S3BucketRequestedBucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaBucketRequestInvokePermission
    Properties:
      BucketName: !Sub "${AWS::StackName}-bucket-requested"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt BucketRequestedFunction.Arn

  S3ManagedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-managed"

  SQSObjectCreated:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-object-created"

  SQSObjectDeleted:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-object-deleted"

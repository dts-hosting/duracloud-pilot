AWSTemplateFormatVersion: 2010-09-09
Description: >-
  DuraCloud
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON

Parameters:
  BucketRequestedImageUri:
    Type: String
    Default: ""
    Description: "Docker image URI for Bucket Requested function (leave empty for local build)"
  ChecksumVerificationImageUri:
    Type: String
    Default: ""
    Description: "Docker image URI for Checksum Verification function (leave empty for local build)"
  FileDeletedImageUri:
    Type: String
    Default: ""
    Description: "Docker image URI for File Deleted function (leave empty for local build)"
  LambdaArchitecture:
    Type: String
    AllowedValues:
      - arm64
      - x86_64
    Description: Architecture for Lambda functions

Conditions:
  BucketRequestedUseExternalImage:
    !Not [!Equals [!Ref BucketRequestedImageUri, ""]]
  ChecksumVerificationUseExternalImage:
    !Not [!Equals [!Ref ChecksumVerificationImageUri, ""]]
  FileDeletedUseExternalImage: !Not [!Equals [!Ref FileDeletedImageUri, ""]]

Resources:
  ##### Functions
  BucketRequestedFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerBuildArgs:
        FUNCTION_NAME: bucket-requested
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: !Sub "${AWS::StackName}-bucket-requested"
    Properties:
      Architectures:
        - !Ref LambdaArchitecture
      Description: DuraCloud function that processes bucket requested events
      Environment:
        Variables:
          S3_BUCKET_PREFIX: !Sub "${AWS::StackName}"
          S3_INVENTORY_DEST_BUCKET: !Ref S3ManagedBucket
          S3_MAX_BUCKETS_PER_REQUEST: 5
          S3_REPLICATION_ROLE_ARN: !GetAtt IAMS3ReplicationRole.Arn
      ImageUri:
        !If [
          BucketRequestedUseExternalImage,
          !Ref BucketRequestedImageUri,
          !Ref "AWS::NoValue",
        ]
      MemorySize: 128
      PackageType: Image
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:CreateBucket
                - s3:DeleteBucket
                - s3:GetObject
                - s3:PutObject
                # Logging
                - s3:PutBucketLogging
                # Basic bucket policy and tagging
                - s3:DeleteBucketPolicy
                - s3:PutBucketPolicy
                - s3:PutBucketTagging
                # Bucket Versioning
                - s3:PutBucketVersioning
                # Bucket Lifecycle Configuration
                - s3:PutLifecycleConfiguration
                # EventBridge notifications
                - s3:PutBucketNotification
                - s3:PutBucketNotificationConfiguration
                # Inventory configuration
                - s3:PutBucketInventoryConfiguration
                - s3:PutInventoryConfiguration
                # Public access settings
                - s3:PutBucketAcl
                - s3:PutBucketOwnershipControls
                - s3:PutBucketPublicAccessBlock
                # Replication configuration
                - s3:PutBucketReplication
                - s3:PutReplicationConfiguration
                # Storage tier management
                - s3:PutBucketLifecycleConfiguration
              Resource: "arn:aws:s3:::*"
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: "*"
              Condition:
                StringEquals:
                  "iam:PassedToService": "s3.amazonaws.com"
      Timeout: 300

  ChecksumVerificationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerBuildArgs:
        FUNCTION_NAME: checksum-verification
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: !Sub "${AWS::StackName}-checksum-verification"
    Properties:
      Architectures:
        - !Ref LambdaArchitecture
      Description: DuraCloud function that processes checksum verification via TTL events
      Environment:
        Variables:
          DYNAMODB_CHECKSUM_TABLE: !Ref DynamoDBChecksumTable
          DYNAMODB_SCHEDULER_TABLE: !Ref DynamoDBChecksumSchedulerTable
      ImageUri:
        !If [
          ChecksumVerificationUseExternalImage,
          !Ref ChecksumVerificationImageUri,
          !Ref "AWS::NoValue",
        ]
      MemorySize: 512
      PackageType: Image
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !GetAtt DynamoDBChecksumTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource:
                - !GetAtt DynamoDBChecksumSchedulerTable.StreamArn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: "arn:aws:s3:::*"
      Timeout: 900

  FileDeletedFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerBuildArgs:
        FUNCTION_NAME: file-deleted
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: !Sub "${AWS::StackName}-file-deleted"
    Properties:
      Architectures:
        - !Ref LambdaArchitecture
      Description: DuraCloud function that processes s3 object deleted events
      Environment:
        Variables:
          DYNAMODB_CHECKSUM_TABLE: !Ref DynamoDBChecksumTable
          S3_BUCKET_PREFIX: !Sub "${AWS::StackName}"
      ImageUri:
        !If [
          FileDeletedUseExternalImage,
          !Ref FileDeletedImageUri,
          !Ref "AWS::NoValue",
        ]
      MemorySize: 128
      PackageType: Image
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource:
                - !GetAtt DynamoDBChecksumTable.Arn
                - !Sub "${DynamoDBChecksumTable.Arn}/index/*"
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt SQSObjectDeleted.Arn
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: "*"
              Condition:
                StringEquals:
                  "iam:PassedToService": "s3.amazonaws.com"
      Timeout: 60

  ##### Function resources (TODO: docs for each resource)
  CloudWatchChecksumVerificationFunctionConcurrencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-checksum-verification-concurrency"
      AlarmDescription: "High concurrency processing checksum verifications"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ChecksumVerificationFunction
      EvaluationPeriods: 2
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Maximum
      Threshold: 800 # Alert before hitting 1000 limit

  CloudWatchChecksumVerificationFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-checksum-verification-errors"
      AlarmDescription: "Error processing checksum verification"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ChecksumVerificationFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1

  CloudWatchFileDeletedFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-file-deleted-errors"
      AlarmDescription: "Error processing file deleted event"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FileDeletedFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1

  CloudWatchSQSObjectDeletedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-file-deleted-dlq-messages"
      AlarmDescription: "Messages present in file deleted DLQ"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SQSObjectDeletedDLQ.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Period: 300
      Statistic: Average
      Threshold: 1

  DynamoDBChecksumTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-checksum-table"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Bucket
          AttributeType: S
        - AttributeName: Object
          AttributeType: S
      KeySchema:
        - AttributeName: Bucket
          KeyType: HASH
        - AttributeName: Object
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  DynamoDBChecksumSchedulerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-checksum-scheduler-table"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Bucket
          AttributeType: S
        - AttributeName: Object
          AttributeType: S
      KeySchema:
        - AttributeName: Bucket
          KeyType: HASH
        - AttributeName: Object
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  EventsObjectCreatedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - prefix: !Sub "${AWS::StackName}"
      Targets:
        - Arn: !GetAtt SQSObjectCreated.Arn
          Id: "SendToSQSOnCreate"
          RoleArn: !GetAtt IAMEventsInvokeSQSRole.Arn

  EventsObjectDeletedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Deleted"
        detail:
          bucket:
            name:
              - prefix: !Sub "${AWS::StackName}"
      Targets:
        - Arn: !GetAtt SQSObjectDeleted.Arn
          Id: "SendToSQSOnDelete"
          RoleArn: !GetAtt IAMEventsInvokeSQSRole.Arn

  IAMEventsInvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-invoke-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt BucketRequestedFunction.Arn

  IAMEventsInvokeSQSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-invoke-sqs-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-invoke-sqs-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource:
                  - !GetAtt SQSObjectCreated.Arn
                  - !GetAtt SQSObjectDeleted.Arn

  IAMS3ReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-s3-replication-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-s3-replication-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}*"
              - Effect: Allow
                Action:
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}*/*"
              - Effect: Allow
                Action:
                  - s3:GetObjectVersionTagging
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}*-replication/*"

  LambdaDynamoDBChecksumSchedulerSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt DynamoDBChecksumSchedulerTable.StreamArn
      FunctionName: !Ref ChecksumVerificationFunction
      FilterCriteria:
        Filters:
          - Pattern: '{"eventName": ["REMOVE"]}'
      MaximumBatchingWindowInSeconds: 5
      StartingPosition: TRIM_HORIZON

  #  LambdaSQSObjectCreatedSource:
  #    Type: AWS::Lambda::EventSourceMapping
  #    Properties:
  #      BatchSize: 10
  #      EventSourceArn: !GetAtt SQSObjectCreated.Arn
  #      FunctionName: !Ref FileUploadedFunction
  #      FunctionResponseTypes:
  #        - ReportBatchItemFailures
  #      MaximumBatchingWindowInSeconds: 5

  LambdaSQSObjectDeletedSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt SQSObjectDeleted.Arn
      FunctionName: !Ref FileDeletedFunction
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 5

  LambdaBucketRequestInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BucketRequestedFunction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-bucket-requested"

  LogsBucketRequestedFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BucketRequestedFunction}"
      RetentionInDays: 7

  LogsFileDeletedFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FileDeletedFunction}"
      RetentionInDays: 7

  LogsChecksumVerificationFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ChecksumVerificationFunction}"
      RetentionInDays: 7

  S3BucketRequestedBucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaBucketRequestInvokePermission
    Properties:
      BucketName: !Sub "${AWS::StackName}-bucket-requested"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt BucketRequestedFunction.Arn

  S3LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-logs"

  S3ManagedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-managed"
      LifecycleConfiguration:
        Rules:
          - Id: "DeleteAfter30Days"
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 1
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  S3ManagedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ManagedBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowAuditDestination"
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-managed/audit/*"
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:s3:::${AWS::StackName}*"
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: "AllowInventoryDestination"
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-managed/inventory/*"
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:s3:::${AWS::StackName}*"
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control

  SQSObjectCreated:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-object-created"

  SQSObjectDeleted:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-object-deleted"
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SQSObjectDeletedDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 300

  SQSObjectDeletedDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-object-deleted-dlq"
      MessageRetentionPeriod: 1209600

  ##### IAM group resources
  IAMS3UsersGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "${AWS::StackName}-S3Users"
      Path: "/"

  IAMS3UsersPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-S3UsersPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow listing buckets
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"
          # Allow CRUD operations on stack name prefixed buckets as the default
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:ListBucketMultipartUploads
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}*"
              - !Sub "arn:aws:s3:::${AWS::StackName}*/*"
          # Read only permissions on stack name prefixed buckets suffixed with "-managed"
          - Effect: Deny
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}*-managed"
              - !Sub "arn:aws:s3:::${AWS::StackName}*-managed/*"
          # View only permissions on stack name prefixed buckets suffixed with "-replication"
          - Effect: Deny
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}*-replication"
              - !Sub "arn:aws:s3:::${AWS::StackName}*-replication/*"
          # Deny all on stack name prefixed buckets suffixed with "-logs"
          - Effect: Deny
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}*-logs"
              - !Sub "arn:aws:s3:::${AWS::StackName}*-logs/*"
      Groups:
        - !Ref IAMS3UsersGroup

  ##### IAM user resources
  IAMTestUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub "${AWS::StackName}-TestUser"
      Path: "/"
      Groups:
        - !Ref IAMS3UsersGroup

  IAMTestUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMTestUser
      Status: Active

  SSMTestUserAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/iam/test/access-key-id"
      Description: "Access Key ID for the S3 test user"
      Type: "String"
      Value: !Ref IAMTestUserAccessKey
      Tier: "Standard"

  SSMTestUserSecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/iam/test/secret-access-key"
      Description: "Secret Access Key for the S3 test user"
      Type: "String" # CF does not support SecureString
      Value: !GetAtt IAMTestUserAccessKey.SecretAccessKey
      Tier: "Standard"

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  DuraCloud
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON

Parameters:
  BucketRequestedImageUri:
    Type: String
    Default: ""
    Description: "Docker image URI for Bucket Requested function (leave empty for local build)"
  LambdaArchitecture:
    Type: String
    AllowedValues:
      - arm64
      - x86_64
    Description: Architecture for Lambda functions

Conditions:
  UseExternalImage: !Not [!Equals [!Ref BucketRequestedImageUri, ""]]

Resources:
  ##### Functions
  BucketRequestedFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerBuildArgs:
        FUNCTION_NAME: bucket-requested
      DockerContext: .
      Dockerfile: Dockerfile
      DockerTag: !Sub "${AWS::StackName}-bucket-requested"
    Properties:
      Architectures:
        - !Ref LambdaArchitecture
      Description: DuraCloud function that processes bucket requested events
      Environment:
        Variables:
          S3_BUCKET_PREFIX: !Sub "${AWS::StackName}"
          S3_INVENTORY_DEST_BUCKET: !Ref S3ManagedBucket
          S3_REPLICATION_ROLE_ARN: !GetAtt IAMS3ReplicationRole.Arn
      ImageUri: !If [UseExternalImage, !Ref BucketRequestedImageUri, !Ref "AWS::NoValue"]
      MemorySize: 128
      PackageType: Image
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:CreateBucket
                - s3:GetObject
                # Basic bucket policy and tagging
                - s3:PutBucketTagging
                - s3:PutBucketPolicy
                # EventBridge notifications
                - s3:PutBucketNotificationConfiguration
                # Inventory configuration
                - s3:PutBucketInventoryConfiguration
                # Public access settings
                - s3:PutBucketPublicAccessBlock
                - s3:PutBucketAcl
                # Replication configuration
                - s3:PutBucketReplication
                # Storage tier management
                - s3:PutBucketLifecycleConfiguration
              Resource: "arn:aws:s3:::*"
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: "*"
              Condition:
                StringEquals:
                  "iam:PassedToService": "s3.amazonaws.com"
      Timeout: 300

  ##### Function resources (TODO: docs for each resource)
  DynamoDBChecksumTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-checksum-table"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Bucket
          AttributeType: S
        - AttributeName: Object
          AttributeType: S
        - AttributeName: ChecksumPurpose
          AttributeType: S
        - AttributeName: LastChecksumDate
          AttributeType: S
      KeySchema:
        - AttributeName: Bucket
          KeyType: HASH
        - AttributeName: Object
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ChecksumDateIndex
          KeySchema:
            - AttributeName: ChecksumPurpose
              KeyType: HASH
            - AttributeName: LastChecksumDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  EventsObjectCreatedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - prefix: !Sub "${AWS::StackName}"
      Targets:
        - Arn: !GetAtt SQSObjectCreated.Arn
          Id: "SendToSQSOnCreate"
          RoleArn: !GetAtt IAMEventsInvokeSQSRole.Arn

  EventsObjectDeletedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Deleted"
        detail:
          bucket:
            name:
              - prefix: !Sub "${AWS::StackName}"
      Targets:
        - Arn: !GetAtt SQSObjectDeleted.Arn
          Id: "SendToSQSOnDelete"
          RoleArn: !GetAtt IAMEventsInvokeSQSRole.Arn

  IAMEventsInvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-invoke-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt BucketRequestedFunction.Arn

  IAMEventsInvokeSQSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-invoke-sqs-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-invoke-sqs-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource:
                  - !GetAtt SQSObjectCreated.Arn
                  - !GetAtt SQSObjectDeleted.Arn

  IAMS3ReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-s3-replication-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-s3-replication-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}*"
              - Effect: Allow
                Action:
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}*/*"
              - Effect: Allow
                Action:
                  - s3:GetObjectVersionTagging
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}*-replication/*"

  LambdaBucketRequestInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BucketRequestedFunction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-bucket-requested"

#  LambdaSQSFixityCheckerSource:
#    Type: AWS::Lambda::EventSourceMapping
#    Properties:
#      BatchSize: 10
#      EventSourceArn: !GetAtt SQSFixityChecker.Arn
#      FunctionName: !Ref FixityCheckerFunction

#  LambdaSQSObjectCreatedSource:
#    Type: AWS::Lambda::EventSourceMapping
#    Properties:
#      BatchSize: 10
#      EventSourceArn: !GetAtt SQSObjectCreated.Arn
#      FunctionName: !Ref FileUploadedFunction

#  LambdaSQSObjectDeletedSource:
#    Type: AWS::Lambda::EventSourceMapping
#    Properties:
#      BatchSize: 10
#      EventSourceArn: !GetAtt SQSObjectDeleted.Arn
#      FunctionName: !Ref FileDeletedFunction

  LogsBucketRequestedFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BucketRequestedFunction}"
      RetentionInDays: 7

  S3BucketRequestedBucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaBucketRequestInvokePermission
    Properties:
      BucketName: !Sub "${AWS::StackName}-bucket-requested"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt BucketRequestedFunction.Arn

  S3LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-logs"

  S3ManagedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-managed"

  S3ManagedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ManagedBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowInventoryDestination"
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-managed/inventory/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:s3:::${AWS::StackName}*"

  SQSFixityChecker:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-fixity-checker"

  SQSObjectCreated:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-object-created"

  SQSObjectDeleted:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-object-deleted"

  ##### IAM group resources
  IAMS3UsersGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "${AWS::StackName}-S3Users"
      Path: "/"

  IAMS3UsersPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-S3UsersPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Allow listing buckets
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"
          # Allow CRUD operations on stack name prefixed buckets as the default
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:ListBucketMultipartUploads
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}*"
              - !Sub "arn:aws:s3:::${AWS::StackName}*/*"
          # Read only permissions on stack name prefixed buckets suffixed with "-managed"
          - Effect: Deny
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}*-managed"
              - !Sub "arn:aws:s3:::${AWS::StackName}*-managed/*"
          # View only permissions on stack name prefixed buckets suffixed with "-replication"
          - Effect: Deny
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}*-replication"
              - !Sub "arn:aws:s3:::${AWS::StackName}*-replication/*"
          # Deny all on stack name prefixed buckets suffixed with "-logs"
          - Effect: Deny
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}*-logs"
              - !Sub "arn:aws:s3:::${AWS::StackName}*-logs/*"
      Groups:
        - !Ref IAMS3UsersGroup

  ##### IAM user resources
  IAMTestUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub "${AWS::StackName}-TestUser"
      Path: "/"
      Groups:
        - !Ref IAMS3UsersGroup

  IAMTestUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMTestUser
      Status: Active

  SSMTestUserAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/iam/test/access-key-id"
      Description: "Access Key ID for the S3 test user"
      Type: "String"
      Value: !Ref IAMTestUserAccessKey
      Tier: "Standard"

  SSMTestUserSecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/iam/test/secret-access-key"
      Description: "Secret Access Key for the S3 test user"
      Type: "String" # CF does not support SecureString
      Value: !GetAtt IAMTestUserAccessKey.SecretAccessKey
      Tier: "Standard"
